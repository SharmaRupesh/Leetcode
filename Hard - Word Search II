class Solution {
    public List<String> findWords(char[][] board, String[] words) 
    {
        List<String> result = new LinkedList<>();
		for(String word: words)
		{
			if(findWord(word, board))
				result.add(word);
		}
        return result;
    }
    
    public static boolean findWord(String word, char[][] grid)
	{
		for(int i=0;i<grid.length;i++)
		{
			for(int j=0;j<grid[0].length;j++)
			{
				if(grid[i][j] == word.charAt(0) && dfs(grid, word, i, j, 0))
					return true;
			}
		}
		return false;
	}
	
	public static boolean dfs(char[][] grid, String word, int i, int j, int count)
	{
		if(word.length() == count)
			return true;
		
		if(i<0|| j<0 || i>=grid.length || j>=grid[0].length || grid[i][j]!=word.charAt(count))
			return false;
		
		char temp = grid[i][j];
		grid[i][j] = '*';
		
		boolean found = dfs(grid, word, i+1, j, count+1) || 
						dfs(grid, word, i-1, j, count+1) || 
						dfs(grid, word, i, j+1, count+1) ||
						dfs(grid, word, i, j-1, count+1);
		
		grid[i][j] = temp;
		return found;
	}
}
